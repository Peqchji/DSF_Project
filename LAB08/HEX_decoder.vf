////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : HEX_decoder.vf
// /___/   /\     Timestamp : 10/23/2022 23:14:08
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog "C:/Users/Peqch/Desktop/Digital system Fundamental/ISE/DSF/LAB08/HEX_decoder.vf" -w "C:/Users/Peqch/Desktop/Digital system Fundamental/ISE/DSF/HEX_decoder.sch"
//Design Name: HEX_decoder
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module OR6_HXILINX_HEX_decoder (O, I0, I1, I2, I3, I4, I5);
    

   output O;

   input I0;
   input I1;
   input I2;
   input I3;
   input I4;
   input I5;

assign O = (I0 || I1 || I2 || I3 || I4 || I5);

endmodule
`timescale 1ns / 1ps

module HEX_decoder(BCD, 
                   segments);

    input [3:0] BCD;
   output [6:0] segments;
   
   wire XLXN_11;
   wire XLXN_14;
   wire XLXN_28;
   wire XLXN_29;
   wire XLXN_30;
   wire XLXN_31;
   wire XLXN_32;
   wire XLXN_33;
   wire XLXN_61;
   wire XLXN_62;
   wire XLXN_63;
   wire XLXN_64;
   wire XLXN_65;
   wire XLXN_68;
   wire XLXN_69;
   wire XLXN_70;
   wire XLXN_71;
   wire XLXN_72;
   wire XLXN_73;
   wire XLXN_74;
   wire XLXN_75;
   wire XLXN_76;
   wire XLXN_77;
   wire XLXN_78;
   wire XLXN_79;
   wire XLXN_80;
   wire XLXN_81;
   wire XLXN_82;
   wire XLXN_83;
   wire XLXN_84;
   wire XLXN_85;
   wire XLXN_86;
   wire XLXN_94;
   wire XLXN_95;
   wire XLXN_96;
   wire XLXN_97;
   wire XLXN_98;
   wire XLXN_100;
   wire XLXN_105;
   
   INV  XLXI_1 (.I(BCD[3]), 
               .O(XLXN_11));
   INV  XLXI_2 (.I(BCD[2]), 
               .O(XLXN_105));
   INV  XLXI_3 (.I(BCD[1]), 
               .O(XLXN_100));
   INV  XLXI_7 (.I(BCD[0]), 
               .O(XLXN_14));
   AND3  XLXI_12 (.I0(BCD[3]), 
                 .I1(XLXN_105), 
                 .I2(XLXN_100), 
                 .O(XLXN_28));
   AND3  XLXI_13 (.I0(XLXN_11), 
                 .I1(BCD[2]), 
                 .I2(BCD[0]), 
                 .O(XLXN_29));
   AND2  XLXI_14 (.I0(BCD[3]), 
                 .I1(XLXN_14), 
                 .O(XLXN_30));
   AND2  XLXI_15 (.I0(XLXN_11), 
                 .I1(BCD[1]), 
                 .O(XLXN_31));
   AND2  XLXI_16 (.I0(BCD[2]), 
                 .I1(BCD[1]), 
                 .O(XLXN_32));
   AND2  XLXI_17 (.I0(XLXN_105), 
                 .I1(XLXN_14), 
                 .O(XLXN_33));
   (* HU_SET = "XLXI_23_0" *) 
   OR6_HXILINX_HEX_decoder  XLXI_23 (.I0(XLXN_28), 
                                    .I1(XLXN_29), 
                                    .I2(XLXN_30), 
                                    .I3(XLXN_31), 
                                    .I4(XLXN_32), 
                                    .I5(XLXN_33), 
                                    .O(segments[0]));
   AND3  XLXI_35 (.I0(XLXN_11), 
                 .I1(XLXN_100), 
                 .I2(XLXN_14), 
                 .O(XLXN_65));
   AND3  XLXI_36 (.I0(XLXN_11), 
                 .I1(BCD[1]), 
                 .I2(BCD[0]), 
                 .O(XLXN_64));
   AND3  XLXI_37 (.I0(BCD[3]), 
                 .I1(XLXN_100), 
                 .I2(BCD[0]), 
                 .O(XLXN_63));
   AND2  XLXI_38 (.I0(XLXN_105), 
                 .I1(XLXN_100), 
                 .O(XLXN_62));
   AND2  XLXI_39 (.I0(XLXN_105), 
                 .I1(XLXN_14), 
                 .O(XLXN_61));
   OR5  XLXI_40 (.I0(XLXN_65), 
                .I1(XLXN_64), 
                .I2(XLXN_63), 
                .I3(XLXN_62), 
                .I4(XLXN_61), 
                .O(segments[1]));
   AND2  XLXI_41 (.I0(XLXN_11), 
                 .I1(XLXN_100), 
                 .O(XLXN_72));
   AND2  XLXI_42 (.I0(XLXN_11), 
                 .I1(BCD[0]), 
                 .O(XLXN_71));
   AND2  XLXI_43 (.I0(XLXN_100), 
                 .I1(BCD[0]), 
                 .O(XLXN_70));
   AND2  XLXI_44 (.I0(XLXN_11), 
                 .I1(BCD[2]), 
                 .O(XLXN_69));
   AND2  XLXI_45 (.I0(BCD[3]), 
                 .I1(XLXN_105), 
                 .O(XLXN_68));
   OR5  XLXI_46 (.I0(XLXN_72), 
                .I1(XLXN_71), 
                .I2(XLXN_70), 
                .I3(XLXN_69), 
                .I4(XLXN_68), 
                .O(segments[2]));
   AND3  XLXI_47 (.I0(XLXN_11), 
                 .I1(XLXN_105), 
                 .I2(XLXN_14), 
                 .O(XLXN_77));
   AND3  XLXI_48 (.I0(XLXN_105), 
                 .I1(BCD[1]), 
                 .I2(BCD[0]), 
                 .O(XLXN_76));
   AND3  XLXI_49 (.I0(BCD[2]), 
                 .I1(XLXN_100), 
                 .I2(BCD[0]), 
                 .O(XLXN_75));
   AND3  XLXI_50 (.I0(BCD[2]), 
                 .I1(BCD[1]), 
                 .I2(XLXN_14), 
                 .O(XLXN_74));
   AND2  XLXI_51 (.I0(BCD[3]), 
                 .I1(XLXN_100), 
                 .O(XLXN_73));
   OR5  XLXI_52 (.I0(XLXN_77), 
                .I1(XLXN_76), 
                .I2(XLXN_75), 
                .I3(XLXN_74), 
                .I4(XLXN_73), 
                .O(segments[3]));
   AND2  XLXI_53 (.I0(XLXN_105), 
                 .I1(XLXN_14), 
                 .O(XLXN_81));
   AND2  XLXI_54 (.I0(BCD[1]), 
                 .I1(XLXN_14), 
                 .O(XLXN_80));
   AND2  XLXI_55 (.I0(BCD[3]), 
                 .I1(BCD[1]), 
                 .O(XLXN_79));
   AND2  XLXI_56 (.I0(BCD[3]), 
                 .I1(BCD[2]), 
                 .O(XLXN_78));
   OR4  XLXI_65 (.I0(XLXN_81), 
                .I1(XLXN_80), 
                .I2(XLXN_79), 
                .I3(XLXN_78), 
                .O(segments[4]));
   AND3  XLXI_66 (.I0(XLXN_11), 
                 .I1(BCD[2]), 
                 .I2(XLXN_100), 
                 .O(XLXN_86));
   AND2  XLXI_67 (.I0(BCD[3]), 
                 .I1(BCD[1]), 
                 .O(XLXN_82));
   AND2  XLXI_68 (.I0(BCD[3]), 
                 .I1(XLXN_105), 
                 .O(XLXN_83));
   AND2  XLXI_69 (.I0(BCD[2]), 
                 .I1(XLXN_14), 
                 .O(XLXN_84));
   AND2  XLXI_70 (.I0(XLXN_100), 
                 .I1(XLXN_14), 
                 .O(XLXN_85));
   OR5  XLXI_75 (.I0(XLXN_86), 
                .I1(XLXN_85), 
                .I2(XLXN_84), 
                .I3(XLXN_83), 
                .I4(XLXN_82), 
                .O(segments[5]));
   AND2  XLXI_76 (.I0(BCD[3]), 
                 .I1(BCD[0]), 
                 .O(XLXN_94));
   AND2  XLXI_77 (.I0(BCD[3]), 
                 .I1(XLXN_105), 
                 .O(XLXN_95));
   AND2  XLXI_78 (.I0(BCD[1]), 
                 .I1(XLXN_14), 
                 .O(XLXN_96));
   AND2  XLXI_79 (.I0(XLXN_105), 
                 .I1(BCD[1]), 
                 .O(XLXN_97));
   AND3  XLXI_80 (.I0(XLXN_11), 
                 .I1(BCD[2]), 
                 .I2(XLXN_100), 
                 .O(XLXN_98));
   OR5  XLXI_81 (.I0(XLXN_98), 
                .I1(XLXN_97), 
                .I2(XLXN_96), 
                .I3(XLXN_95), 
                .I4(XLXN_94), 
                .O(segments[6]));
endmodule
