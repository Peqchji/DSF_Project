////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : Lab8.vf
// /___/   /\     Timestamp : 10/24/2022 00:18:26
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog "C:/Users/Peqch/Desktop/Digital system Fundamental/ISE/DSF/LAB08/Lab8.vf" -w "C:/Users/Peqch/Desktop/Digital system Fundamental/ISE/DSF/LAB08/Lab8.sch"
//Design Name: Lab8
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module ADD8_HXILINX_Lab8 (CO, OFL, S, A, B, CI);


   output 	      CO;
   output 	      OFL;
   output [7:0]       S;

   input  [7:0]       A;
   input  [7:0]       B;
   input              CI;

   assign   {CO, S} = A + B + CI;
   assign   OFL     = ( A[7] & B[7] & (~S[7])) | ((~A[7]) & (~B[7]) & S[7]);

endmodule
`timescale  100 ps / 10 ps

module D2_4E_HXILINX_Lab8 (D0, D1, D2, D3, A0, A1, E);
    

   output D0;
   output D1;
   output D2;
   output D3;

   input  A0;
   input  A1;
   input  E;
  
   reg D0;
   reg D1;
   reg D2;
   reg D3;

      always @ (A0 or A1 or E)
      begin
         if(!E)
           {D3, D2, D1, D0} <= 4'b0000;
        else
        begin
           case({A1,A0})
             2'b00 : {D3,D2,D1,D0} <= 4'b0001;
             2'b01 : {D3,D2,D1,D0} <= 4'b0010;
             2'b10 : {D3,D2,D1,D0} <= 4'b0100;
             2'b11 : {D3,D2,D1,D0} <= 4'b1000;
          endcase
        end
     end 

endmodule
`timescale 100 ps / 10 ps

module CB2CE_HXILINX_Lab8(CEO, Q0, Q1, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 2'b11;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q1, Q0} <= 2'b00;
	else if (CE)
	  {Q1,Q0} <= {Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = ({Q1,Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module DIsplay_MUSER_Lab8(Bit0, 
                          Bit1, 
                          Bit2, 
                          Bit3, 
                          CLK_Display, 
                          Data, 
                          Digit0, 
                          Digit1, 
                          Digit2, 
                          Digit3);

    input [3:0] Bit0;
    input [3:0] Bit1;
    input [3:0] Bit2;
    input [3:0] Bit3;
    input CLK_Display;
   output [6:0] Data;
   output Digit0;
   output Digit1;
   output Digit2;
   output Digit3;
   
   wire [3:0] XLXN_2;
   wire XLXN_5;
   wire XLXN_10;
   wire XLXN_12;
   wire XLXN_16;
   wire XLXN_17;
   wire XLXN_18;
   wire XLXN_24;
   wire XLXN_25;
   wire XLXN_26;
   wire XLXN_27;
   
   MUX4_1_4  XLXI_2 (.Q0(Bit0[3:0]), 
                    .Q1(Bit1[3:0]), 
                    .Q2(Bit2[3:0]), 
                    .Q3(Bit3[3:0]), 
                    .S0(XLXN_16), 
                    .S1(XLXN_18), 
                    .Y(XLXN_2[3:0]));
   (* HU_SET = "XLXI_3_0" *) 
   CB2CE_HXILINX_Lab8  XLXI_3 (.C(XLXN_10), 
                              .CE(XLXN_5), 
                              .CLR(XLXN_12), 
                              .CEO(), 
                              .Q0(XLXN_16), 
                              .Q1(XLXN_18), 
                              .TC());
   GND  XLXI_4 (.G(XLXN_12));
   VCC  XLXI_5 (.P(XLXN_5));
   Div100k  XLXI_6 (.CLR(XLXN_12), 
                   .In_CLK(CLK_Display), 
                   .Out_CLK(XLXN_10));
   HEX_decoder  XLXI_7 (.BCD(XLXN_2[3:0]), 
                       .segments(Data[6:0]));
   (* HU_SET = "XLXI_9_1" *) 
   D2_4E_HXILINX_Lab8  XLXI_9 (.A0(XLXN_16), 
                              .A1(XLXN_18), 
                              .E(XLXN_17), 
                              .D0(XLXN_24), 
                              .D1(XLXN_25), 
                              .D2(XLXN_26), 
                              .D3(XLXN_27));
   VCC  XLXI_10 (.P(XLXN_17));
   INV  XLXI_12 (.I(XLXN_24), 
                .O(Digit0));
   INV  XLXI_13 (.I(XLXN_25), 
                .O(Digit1));
   INV  XLXI_14 (.I(XLXN_26), 
                .O(Digit2));
   INV  XLXI_15 (.I(XLXN_27), 
                .O(Digit3));
endmodule
`timescale 1ns / 1ps

module Lab8(A, 
            B, 
            OSC, 
            Buzzer, 
            Common0, 
            Common1, 
            Common2, 
            Common3, 
            Data, 
            XLXN_35);

    input [7:0] A;
    input [7:0] B;
    input OSC;
   output Buzzer;
   output Common0;
   output Common1;
   output Common2;
   output Common3;
   output [6:0] Data;
   output XLXN_35;
   
   wire [3:0] Bit2;
   wire [3:0] Bit3;
   wire [7:0] S;
   wire XLXN_3;
   wire XLXN_133;
   wire XLXN_134;
   
   GND  XLXI_1 (.G(XLXN_3));
   (* HU_SET = "XLXI_6_2" *) 
   ADD8_HXILINX_Lab8  XLXI_6 (.A(A[7:0]), 
                             .B(B[7:0]), 
                             .CI(XLXN_3), 
                             .CO(Bit2[0]), 
                             .OFL(XLXN_35), 
                             .S(S[7:0]));
   DIsplay_MUSER_Lab8  XLXI_19 (.Bit0(S[3:0]), 
                               .Bit1(S[7:4]), 
                               .Bit2(Bit2[3:0]), 
                               .Bit3(Bit3[3:0]), 
                               .CLK_Display(OSC), 
                               .Data(Data[6:0]), 
                               .Digit0(Common0), 
                               .Digit1(Common1), 
                               .Digit2(Common2), 
                               .Digit3(Common3));
   GND  XLXI_37 (.G(Bit2[1]));
   GND  XLXI_38 (.G(Bit2[2]));
   GND  XLXI_39 (.G(Bit2[3]));
   GND  XLXI_41 (.G(Bit3[1]));
   GND  XLXI_42 (.G(Bit3[2]));
   GND  XLXI_44 (.G(Bit3[3]));
   GND  XLXI_45 (.G(Bit3[0]));
   AND4B4  XLXI_59 (.I0(S[4]), 
                   .I1(S[5]), 
                   .I2(S[6]), 
                   .I3(S[7]), 
                   .O(XLXN_133));
   AND4B4  XLXI_60 (.I0(S[0]), 
                   .I1(S[1]), 
                   .I2(S[2]), 
                   .I3(S[3]), 
                   .O(XLXN_134));
   AND3B1  XLXI_61 (.I0(Bit2[0]), 
                   .I1(XLXN_134), 
                   .I2(XLXN_133), 
                   .O(Buzzer));
endmodule
