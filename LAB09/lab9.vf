////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : lab9.vf
// /___/   /\     Timestamp : 11/06/2022 23:51:13
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog "C:/Users/Peqch/Desktop/Digital system Fundamental/ISE/DSF/LAB09/lab9.vf" -w "C:/Users/Peqch/Desktop/Digital system Fundamental/ISE/DSF/LAB09/lab9.sch"
//Design Name: lab9
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 100 ps / 10 ps

module FTC_HXILINX_lab9(Q, C, CLR, T);
   
   output             Q;

   input 	      C;	
   input 	      CLR;	
   input              T;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;
  
   
 
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else if(T)
          Q <= !Q;
     end
   
endmodule
`timescale  100 ps / 10 ps

module ADD8_HXILINX_lab9 (CO, OFL, S, A, B, CI);


   output 	      CO;
   output 	      OFL;
   output [7:0]       S;

   input  [7:0]       A;
   input  [7:0]       B;
   input              CI;

   assign   {CO, S} = A + B + CI;
   assign   OFL     = ( A[7] & B[7] & (~S[7])) | ((~A[7]) & (~B[7]) & S[7]);

endmodule
`timescale  100 ps / 10 ps

module ADSU8_HXILINX_lab9 (CO, OFL, S, A, ADD, B, CI);

   
   output             CO;
   output             OFL;
   output [7:0]       S;

   input  [7:0]       A;
   input  	      ADD;
   input  [7:0]       B;
   input              CI;

   reg    [8:0]       adsu_tmp;  

   always @ (A, ADD, B, CI) 
   begin
      if(ADD)
         adsu_tmp = A + B + CI;
      else
         adsu_tmp = A - (!CI) - B;
   end

   assign S   =  adsu_tmp[7:0];
   assign CO  =  ADD ? adsu_tmp[8] : ~adsu_tmp[8];
   assign OFL =  ADD ? ( (A[7] & B[7] & (~S[7])) | ((~A[7]) & (~B[7]) & S[7]) ) : ( (A[7] & (~B[7]) & (~S[7])) | ((~A[7]) & B[7] & S[7]) );

endmodule
`timescale 1ns / 1ps

module encoder_MUSER_lab9(A0, 
                          A1, 
                          A2, 
                          A3, 
                          Q0, 
                          Q1);

    input A0;
    input A1;
    input A2;
    input A3;
   output Q0;
   output Q1;
   
   
   BUF  XLXI_9 (.I(A0), 
               .O());
   OR2  XLXI_12 (.I0(A3), 
                .I1(A1), 
                .O(Q0));
   OR2  XLXI_13 (.I0(A3), 
                .I1(A2), 
                .O(Q1));
endmodule
`timescale 1ns / 1ps

module lab9(A, 
            B, 
            OSC, 
            SW1_P45, 
            SW2_P46, 
            SW3_P47, 
            SW4_P48, 
            Data, 
            XLXN_250, 
            XLXN_251, 
            XLXN_252, 
            XLXN_253);

    input [7:0] A;
    input [7:0] B;
    input OSC;
    input SW1_P45;
    input SW2_P46;
    input SW3_P47;
    input SW4_P48;
   output [6:0] Data;
   output XLXN_250;
   output XLXN_251;
   output XLXN_252;
   output XLXN_253;
   
   wire [3:0] Bit2;
   wire [3:0] Bit3;
   wire [7:0] N3;
   wire [7:0] Q3;
   wire XLXN_4;
   wire XLXN_43;
   wire XLXN_44;
   wire XLXN_45;
   wire XLXN_46;
   wire XLXN_47;
   wire XLXN_48;
   wire XLXN_54;
   wire XLXN_119;
   wire XLXN_120;
   wire [7:0] XLXN_149;
   wire [7:0] XLXN_150;
   wire [7:0] XLXN_152;
   wire [7:0] XLXN_153;
   wire XLXN_155;
   wire XLXN_157;
   wire [7:0] XLXN_221;
   wire [7:0] XLXN_222;
   wire [7:0] XLXN_224;
   wire [3:0] XLXN_232;
   wire [3:0] XLXN_233;
   wire XLXN_268;
   wire [7:0] XLXN_292;
   wire [7:0] XLXN_293;
   wire XLXN_390;
   wire XLXN_391;
   wire XLXN_392;
   wire XLXN_398;
   wire XLXN_400;
   wire XLXN_402;
   wire XLXN_403;
   wire XLXN_405;
   wire XLXN_407;
   wire XLXN_408;
   wire XLXN_410;
   wire XLXN_412;
   wire XLXN_461;
   wire XLXN_462;
   wire XLXN_463;
   wire XLXN_464;
   wire XLXN_476;
   
   OR3  XLXI_1 (.I0(SW4_P48), 
               .I1(SW3_P47), 
               .I2(SW1_P45), 
               .O(XLXN_43));
   VCC  XLXI_2 (.P(XLXN_46));
   VCC  XLXI_3 (.P(XLXN_47));
   VCC  XLXI_4 (.P(XLXN_4));
   (* HU_SET = "XLXI_5_0" *) 
   FTC_HXILINX_lab9  XLXI_5 (.C(XLXN_398), 
                            .CLR(XLXN_54), 
                            .T(XLXN_4), 
                            .Q(XLXN_463));
   (* HU_SET = "XLXI_6_1" *) 
   FTC_HXILINX_lab9  XLXI_6 (.C(XLXN_390), 
                            .CLR(XLXN_45), 
                            .T(XLXN_48), 
                            .Q(XLXN_464));
   OR3  XLXI_7 (.I0(SW3_P47), 
               .I1(SW2_P46), 
               .I2(SW1_P45), 
               .O(XLXN_45));
   VCC  XLXI_8 (.P(XLXN_48));
   (* HU_SET = "XLXI_9_2" *) 
   FTC_HXILINX_lab9  XLXI_9 (.C(XLXN_408), 
                            .CLR(XLXN_44), 
                            .T(XLXN_47), 
                            .Q(XLXN_461));
   OR3  XLXI_10 (.I0(SW4_P48), 
                .I1(SW3_P47), 
                .I2(SW2_P46), 
                .O(XLXN_44));
   OR3  XLXI_11 (.I0(SW4_P48), 
                .I1(SW2_P46), 
                .I2(SW1_P45), 
                .O(XLXN_54));
   (* HU_SET = "XLXI_12_3" *) 
   FTC_HXILINX_lab9  XLXI_12 (.C(XLXN_403), 
                             .CLR(XLXN_43), 
                             .T(XLXN_46), 
                             .Q(XLXN_462));
   deMUX1_4_8  XLXI_62 (.Input(A[7:0]), 
                       .Sel0(XLXN_120), 
                       .Sel1(XLXN_119), 
                       .Q0(XLXN_149[7:0]), 
                       .Q1(XLXN_292[7:0]), 
                       .Q2(XLXN_152[7:0]), 
                       .Q3());
   deMUX1_4_8  XLXI_78 (.Input(B[7:0]), 
                       .Sel0(XLXN_120), 
                       .Sel1(XLXN_119), 
                       .Q0(XLXN_150[7:0]), 
                       .Q1(XLXN_293[7:0]), 
                       .Q2(XLXN_153[7:0]), 
                       .Q3(Q3[7:0]));
   (* HU_SET = "XLXI_82_4" *) 
   ADD8_HXILINX_lab9  XLXI_82 (.A(XLXN_149[7:0]), 
                              .B(XLXN_150[7:0]), 
                              .CI(XLXN_157), 
                              .CO(XLXN_476), 
                              .OFL(), 
                              .S(XLXN_221[7:0]));
   XOR_8  XLXI_83 (.A(XLXN_152[7:0]), 
                  .B(XLXN_153[7:0]), 
                  .Output(XLXN_224[7:0]));
   (* HU_SET = "XLXI_84_5" *) 
   ADSU8_HXILINX_lab9  XLXI_84 (.A(XLXN_293[7:0]), 
                               .ADD(XLXN_155), 
                               .B(XLXN_292[7:0]), 
                               .CI(XLXN_268), 
                               .CO(), 
                               .OFL(), 
                               .S(XLXN_222[7:0]));
   GND  XLXI_85 (.G(XLXN_155));
   GND  XLXI_86 (.G(XLXN_157));
   MUX4_1_8  XLXI_146 (.N0(XLXN_221[7:0]), 
                      .N1(XLXN_222[7:0]), 
                      .N2(XLXN_224[7:0]), 
                      .N3(N3[7:0]), 
                      .Sel0(XLXN_120), 
                      .Sel1(XLXN_119), 
                      .Q3_0(XLXN_232[3:0]), 
                      .Q7_4(XLXN_233[3:0]));
   GND  XLXI_147 (.G(N3[0]));
   DIsplay  XLXI_148 (.Bit0(XLXN_232[3:0]), 
                     .Bit1(XLXN_233[3:0]), 
                     .Bit2(Bit2[3:0]), 
                     .Bit3(Bit3[3:0]), 
                     .CLK_Display(OSC), 
                     .Data(Data[6:0]), 
                     .Digit0(XLXN_250), 
                     .Digit1(XLXN_251), 
                     .Digit2(XLXN_252), 
                     .Digit3(XLXN_253));
   VCC  XLXI_151 (.P(XLXN_268));
   GND  XLXI_154 (.G(Bit3[0]));
   GND  XLXI_155 (.G(Bit3[1]));
   GND  XLXI_156 (.G(Bit3[2]));
   GND  XLXI_157 (.G(Bit3[3]));
   GND  XLXI_158 (.G(Bit2[3]));
   GND  XLXI_159 (.G(Bit2[2]));
   GND  XLXI_160 (.G(Bit2[1]));
   BUF  XLXI_165 (.I(Q3[6]), 
                 .O(N3[7]));
   BUF  XLXI_167 (.I(Q3[5]), 
                 .O(N3[6]));
   BUF  XLXI_168 (.I(Q3[4]), 
                 .O(N3[5]));
   BUF  XLXI_169 (.I(Q3[3]), 
                 .O(N3[4]));
   BUF  XLXI_170 (.I(Q3[2]), 
                 .O(N3[3]));
   BUF  XLXI_171 (.I(Q3[1]), 
                 .O(N3[2]));
   BUF  XLXI_172 (.I(Q3[0]), 
                 .O(N3[1]));
   BUFH  XLXI_215 (.I(SW1_P45), 
                  .O(XLXN_412));
   BUFH  XLXI_216 (.I(SW2_P46), 
                  .O(XLXN_407));
   BUFH  XLXI_218 (.I(SW3_P47), 
                  .O(XLXN_402));
   BUFH  XLXI_219 (.I(SW4_P48), 
                  .O(XLXN_391));
   BUF  XLXI_225 (.I(XLXN_391), 
                 .O(XLXN_392));
   BUF  XLXI_226 (.I(XLXN_392), 
                 .O(XLXN_390));
   BUF  XLXI_227 (.I(XLXN_400), 
                 .O(XLXN_398));
   BUF  XLXI_228 (.I(XLXN_402), 
                 .O(XLXN_400));
   BUF  XLXI_229 (.I(XLXN_405), 
                 .O(XLXN_403));
   BUF  XLXI_230 (.I(XLXN_407), 
                 .O(XLXN_405));
   BUF  XLXI_231 (.I(XLXN_410), 
                 .O(XLXN_408));
   BUF  XLXI_232 (.I(XLXN_412), 
                 .O(XLXN_410));
   encoder_MUSER_lab9  XLXI_256 (.A0(XLXN_461), 
                                .A1(XLXN_462), 
                                .A2(XLXN_463), 
                                .A3(XLXN_464), 
                                .Q0(XLXN_120), 
                                .Q1(XLXN_119));
   OR2  XLXI_257 (.I0(Q3[7]), 
                 .I1(XLXN_476), 
                 .O(Bit2[0]));
endmodule
