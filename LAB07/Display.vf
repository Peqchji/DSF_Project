////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : Display.vf
// /___/   /\     Timestamp : 10/23/2022 21:15:34
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog "C:/Users/Peqch/Desktop/Digital system Fundamental/ISE/DSF/LAB07/Display.vf" -w "C:/Users/Peqch/Desktop/Digital system Fundamental/ISE/DSF/LAB07/Display.sch"
//Design Name: Display
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 100 ps / 10 ps

module FTC_HXILINX_Display(Q, C, CLR, T);
   
   output             Q;

   input 	      C;	
   input 	      CLR;	
   input              T;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;
  
   
 
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else if(T)
          Q <= !Q;
     end
   
endmodule
`timescale 100 ps / 10 ps

module FJKC_HXILINX_Display(Q, C, CLR, J, K);
   
   output             Q;

   input 	      C;	
   input 	      CLR;	
   input              J;
   input              K;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;


   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else
        begin
           if(!J)
           begin
              if(K)
              Q <= 1'b0;
           end
           else
           begin
              if(!K)
              Q <= 1'b1;
              else 
              Q <= !Q;
           end
        end
     end
   
endmodule
`timescale 100 ps / 10 ps

module CB2CE_HXILINX_Display(CEO, Q0, Q1, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 2'b11;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q1, Q0} <= 2'b00;
	else if (CE)
	  {Q1,Q0} <= {Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = ({Q1,Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module COUNTER0_9_MUSER_Display(CLK, 
                                Clr, 
                                bit, 
                                TC);

    input CLK;
    input Clr;
   output [3:0] bit;
   output TC;
   
   wire XLXN_3;
   wire XLXN_62;
   wire XLXN_63;
   wire XLXN_65;
   wire XLXN_93;
   wire XLXN_95;
   wire XLXN_96;
   wire [3:0] bit_DUMMY;
   
   assign bit[3:0] = bit_DUMMY[3:0];
   (* HU_SET = "XLXI_1_0" *) 
   FJKC_HXILINX_Display  XLXI_1 (.C(CLK), 
                                .CLR(Clr), 
                                .J(XLXN_3), 
                                .K(XLXN_3), 
                                .Q(bit_DUMMY[0]));
   VCC  XLXI_3 (.P(XLXN_3));
   (* HU_SET = "XLXI_4_1" *) 
   FJKC_HXILINX_Display  XLXI_4 (.C(CLK), 
                                .CLR(Clr), 
                                .J(XLXN_62), 
                                .K(bit_DUMMY[0]), 
                                .Q(bit_DUMMY[1]));
   (* HU_SET = "XLXI_5_2" *) 
   FJKC_HXILINX_Display  XLXI_5 (.C(CLK), 
                                .CLR(Clr), 
                                .J(XLXN_63), 
                                .K(XLXN_63), 
                                .Q(bit_DUMMY[2]));
   (* HU_SET = "XLXI_9_3" *) 
   FJKC_HXILINX_Display  XLXI_9 (.C(CLK), 
                                .CLR(Clr), 
                                .J(XLXN_65), 
                                .K(bit_DUMMY[0]), 
                                .Q(bit_DUMMY[3]));
   AND2B1  XLXI_37 (.I0(bit_DUMMY[3]), 
                   .I1(bit_DUMMY[0]), 
                   .O(XLXN_62));
   AND2  XLXI_38 (.I0(bit_DUMMY[1]), 
                 .I1(bit_DUMMY[0]), 
                 .O(XLXN_63));
   AND3  XLXI_40 (.I0(bit_DUMMY[2]), 
                 .I1(bit_DUMMY[1]), 
                 .I2(bit_DUMMY[0]), 
                 .O(XLXN_65));
   OR2  XLXI_53 (.I0(bit_DUMMY[1]), 
                .I1(bit_DUMMY[0]), 
                .O(XLXN_95));
   OR2  XLXI_54 (.I0(bit_DUMMY[3]), 
                .I1(bit_DUMMY[2]), 
                .O(XLXN_96));
   OR2  XLXI_55 (.I0(XLXN_96), 
                .I1(XLXN_95), 
                .O(XLXN_93));
   INV  XLXI_56 (.I(XLXN_93), 
                .O(TC));
endmodule
`timescale 1ns / 1ps

module Div200_MUSER_Display(CLR, 
                            In_CLK, 
                            Out_CLK);

    input CLR;
    input In_CLK;
   output Out_CLK;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_3;
   
   COUNTER0_9_MUSER_Display  XLXI_1 (.CLK(In_CLK), 
                                    .Clr(CLR), 
                                    .bit(), 
                                    .TC(XLXN_1));
   COUNTER0_9_MUSER_Display  XLXI_2 (.CLK(XLXN_1), 
                                    .Clr(CLR), 
                                    .bit(), 
                                    .TC(XLXN_2));
   (* HU_SET = "XLXI_3_4" *) 
   FTC_HXILINX_Display  XLXI_3 (.C(XLXN_2), 
                               .CLR(CLR), 
                               .T(XLXN_3), 
                               .Q(Out_CLK));
   VCC  XLXI_4 (.P(XLXN_3));
endmodule
`timescale 1ns / 1ps

module Div100k_MUSER_Display(CLR, 
                             In_CLK, 
                             Out_CLK);

    input CLR;
    input In_CLK;
   output Out_CLK;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_11;
   
   COUNTER0_9_MUSER_Display  XLXI_1 (.CLK(In_CLK), 
                                    .Clr(CLR), 
                                    .bit(), 
                                    .TC(XLXN_1));
   COUNTER0_9_MUSER_Display  XLXI_2 (.CLK(XLXN_1), 
                                    .Clr(CLR), 
                                    .bit(), 
                                    .TC(XLXN_2));
   COUNTER0_9_MUSER_Display  XLXI_3 (.CLK(XLXN_2), 
                                    .Clr(CLR), 
                                    .bit(), 
                                    .TC(XLXN_3));
   COUNTER0_9_MUSER_Display  XLXI_4 (.CLK(XLXN_3), 
                                    .Clr(CLR), 
                                    .bit(), 
                                    .TC(XLXN_11));
   COUNTER0_9_MUSER_Display  XLXI_5 (.CLK(XLXN_11), 
                                    .Clr(CLR), 
                                    .bit(), 
                                    .TC(Out_CLK));
endmodule
`timescale 1ns / 1ps

module Display(Blink_Hold, 
               CLR, 
               M1, 
               M10, 
               ScanCLK, 
               S1, 
               S10, 
               a, 
               b, 
               c, 
               d, 
               Digit0, 
               Digit1, 
               Digit2, 
               Digit3, 
               e, 
               f, 
               g, 
               h);

    input Blink_Hold;
    input CLR;
    input [3:0] M1;
    input [3:0] M10;
    input ScanCLK;
    input [3:0] S1;
    input [3:0] S10;
   output a;
   output b;
   output c;
   output d;
   output Digit0;
   output Digit1;
   output Digit2;
   output Digit3;
   output e;
   output f;
   output g;
   output h;
   
   wire XLXN_6;
   wire XLXN_28;
   wire XLXN_49;
   wire XLXN_80;
   wire XLXN_82;
   wire XLXN_83;
   wire XLXN_89;
   wire XLXN_94;
   wire XLXN_169;
   wire XLXN_173;
   wire XLXN_175;
   wire XLXN_176;
   wire [3:0] Y;
   
   MUX4_1_4  XLXI_1 (.Q0(M1[3:0]), 
                    .Q1(M10[3:0]), 
                    .Q2(S1[3:0]), 
                    .Q3(S10[3:0]), 
                    .S0(XLXN_49), 
                    .S1(XLXN_28), 
                    .Y(Y[3:0]));
   VCC  XLXI_7 (.P(XLXN_6));
   decoder  XLXI_11 (.A0(Y[0]), 
                    .A1(Y[1]), 
                    .A2(Y[2]), 
                    .A3(Y[3]), 
                    .a(a), 
                    .b(b), 
                    .c(c), 
                    .d(d), 
                    .e(e), 
                    .f(f), 
                    .g(g));
   AND2  XLXI_15 (.I0(XLXN_49), 
                 .I1(XLXN_28), 
                 .O(XLXN_82));
   AND2B2  XLXI_16 (.I0(XLXN_49), 
                   .I1(XLXN_28), 
                   .O(XLXN_175));
   AND2B1  XLXI_17 (.I0(XLXN_49), 
                   .I1(XLXN_28), 
                   .O(XLXN_83));
   AND2B1  XLXI_18 (.I0(XLXN_28), 
                   .I1(XLXN_49), 
                   .O(XLXN_80));
   INV  XLXI_21 (.I(XLXN_80), 
                .O(Digit3));
   INV  XLXI_22 (.I(XLXN_175), 
                .O(Digit2));
   INV  XLXI_23 (.I(XLXN_82), 
                .O(Digit1));
   INV  XLXI_24 (.I(XLXN_83), 
                .O(Digit0));
   (* HU_SET = "XLXI_31_5" *) 
   CB2CE_HXILINX_Display  XLXI_31 (.C(XLXN_89), 
                                  .CE(XLXN_6), 
                                  .CLR(CLR), 
                                  .CEO(), 
                                  .Q0(XLXN_49), 
                                  .Q1(XLXN_28), 
                                  .TC());
   Div100k_MUSER_Display  XLXI_32 (.CLR(CLR), 
                                  .In_CLK(ScanCLK), 
                                  .Out_CLK(XLXN_89));
   AND2  XLXI_34 (.I0(Blink_Hold), 
                 .I1(XLXN_175), 
                 .O(XLXN_94));
   OR2  XLXI_35 (.I0(XLXN_94), 
                .I1(XLXN_169), 
                .O(h));
   AND2  XLXI_45 (.I0(XLXN_175), 
                 .I1(XLXN_176), 
                 .O(XLXN_169));
   Div200_MUSER_Display  XLXI_46 (.CLR(CLR), 
                                 .In_CLK(XLXN_89), 
                                 .Out_CLK(XLXN_173));
   FD #( .INIT(1'b0) ) XLXI_52 (.C(ScanCLK), 
               .D(XLXN_173), 
               .Q(XLXN_176));
endmodule
