////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : counter.vf
// /___/   /\     Timestamp : 10/12/2022 16:51:11
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog "C:/Users/Peqch/Desktop/Digital system Fundamental/ISE/DSF/LAB06/counter.vf" -w "C:/Users/Peqch/Desktop/Digital system Fundamental/ISE/DSF/LAB06/counter.sch"
//Design Name: counter
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 100 ps / 10 ps

module CB4CE_HXILINX_counter(CEO, Q0, Q1, Q2, Q3, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 4'b1111;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             Q2;
   output             Q3;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   reg                Q2;
   reg                Q3;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q3, Q2, Q1, Q0} <= 4'b0000;
	else if (CE)
	  {Q3, Q2, Q1,Q0} <= {Q3, Q2, Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = ({Q3, Q2, Q1, Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 100 ps / 10 ps

module FJKC_HXILINX_counter(Q, C, CLR, J, K);
   
   output             Q;

   input 	      C;	
   input 	      CLR;	
   input              J;
   input              K;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;


   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else
        begin
           if(!J)
           begin
              if(K)
              Q <= 1'b0;
           end
           else
           begin
              if(!K)
              Q <= 1'b1;
              else 
              Q <= !Q;
           end
        end
     end
   
endmodule
`timescale 100 ps / 10 ps

module CB2CE_HXILINX_counter(CEO, Q0, Q1, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 2'b11;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q1, Q0} <= 2'b00;
	else if (CE)
	  {Q1,Q0} <= {Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = ({Q1,Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module counter0_9_MUSER_counter(C, 
                                count, 
                                TC);

    input C;
   output [3:0] count;
   output TC;
   
   wire XLXN_3;
   wire XLXN_20;
   wire XLXN_21;
   wire XLXN_48;
   wire XLXN_49;
   wire XLXN_50;
   wire XLXN_51;
   wire TC_DUMMY;
   
   assign TC = TC_DUMMY;
   (* HU_SET = "XLXI_10_34" *) 
   CB4CE_HXILINX_counter  XLXI_10 (.C(C), 
                                  .CE(XLXN_3), 
                                  .CLR(TC_DUMMY), 
                                  .CEO(), 
                                  .Q0(XLXN_51), 
                                  .Q1(XLXN_49), 
                                  .Q2(XLXN_50), 
                                  .Q3(XLXN_48), 
                                  .TC());
   VCC  XLXI_11 (.P(XLXN_3));
   AND4  XLXI_16 (.I0(XLXN_48), 
                 .I1(XLXN_49), 
                 .I2(XLXN_20), 
                 .I3(XLXN_21), 
                 .O(TC_DUMMY));
   INV  XLXI_17 (.I(XLXN_50), 
                .O(XLXN_20));
   INV  XLXI_18 (.I(XLXN_51), 
                .O(XLXN_21));
   BUF  XLXI_27 (.I(XLXN_51), 
                .O(count[0]));
   BUF  XLXI_28 (.I(XLXN_49), 
                .O(count[1]));
   BUF  XLXI_29 (.I(XLXN_50), 
                .O(count[2]));
   BUF  XLXI_30 (.I(XLXN_48), 
                .O(count[3]));
endmodule
`timescale 1ns / 1ps

module Div1k_MUSER_counter(In_CLK, 
                           Out_CLK);

    input In_CLK;
   output Out_CLK;
   
   wire XLXN_1;
   wire XLXN_2;
   
   counter0_9_MUSER_counter  XLXI_1 (.C(In_CLK), 
                                    .count(), 
                                    .TC(XLXN_1));
   counter0_9_MUSER_counter  XLXI_2 (.C(XLXN_1), 
                                    .count(), 
                                    .TC(XLXN_2));
   counter0_9_MUSER_counter  XLXI_3 (.C(XLXN_2), 
                                    .count(), 
                                    .TC(Out_CLK));
endmodule
`timescale 1ns / 1ps

module Div16K_MUSER_counter(In_CLK, 
                            Out_CLK);

    input In_CLK;
   output Out_CLK;
   
   wire XLXN_1;
   wire XLXN_3;
   
   Div1k_MUSER_counter  XLXI_1 (.In_CLK(In_CLK), 
                               .Out_CLK(XLXN_1));
   (* HU_SET = "XLXI_2_35" *) 
   CB4CE_HXILINX_counter  XLXI_2 (.C(XLXN_1), 
                                 .CE(XLXN_3), 
                                 .CLR(), 
                                 .CEO(), 
                                 .Q0(), 
                                 .Q1(), 
                                 .Q2(), 
                                 .Q3(), 
                                 .TC(Out_CLK));
   VCC  XLXI_3 (.P(XLXN_3));
endmodule
`timescale 1ns / 1ps

module Div20K_MUSER_counter(In_CLK, 
                            Out_CLK);

    input In_CLK;
   output Out_CLK;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_3;
   
   Div1k_MUSER_counter  XLXI_1 (.In_CLK(In_CLK), 
                               .Out_CLK(XLXN_1));
   counter0_9_MUSER_counter  XLXI_2 (.C(XLXN_1), 
                                    .count(), 
                                    .TC(XLXN_2));
   VCC  XLXI_4 (.P(XLXN_3));
   (* HU_SET = "XLXI_5_36" *) 
   FJKC_HXILINX_counter  XLXI_5 (.C(XLXN_2), 
                                .CLR(), 
                                .J(XLXN_3), 
                                .K(XLXN_3), 
                                .Q(Out_CLK));
endmodule
`timescale 1ns / 1ps

module Div4M_MUSER_counter(In_CLK, 
                           Out_CLK);

    input In_CLK;
   output Out_CLK;
   
   wire XLXN_1;
   wire XLXN_4;
   wire XLXN_12;
   
   Div1k_MUSER_counter  XLXI_1 (.In_CLK(In_CLK), 
                               .Out_CLK(XLXN_1));
   Div1k_MUSER_counter  XLXI_2 (.In_CLK(XLXN_1), 
                               .Out_CLK(XLXN_12));
   (* HU_SET = "XLXI_3_37" *) 
   CB2CE_HXILINX_counter  XLXI_3 (.C(XLXN_12), 
                                 .CE(XLXN_4), 
                                 .CLR(), 
                                 .CEO(), 
                                 .Q0(), 
                                 .Q1(), 
                                 .TC(Out_CLK));
   VCC  XLXI_4 (.P(XLXN_4));
endmodule
`timescale 1ns / 1ps

module counter(C_CLK, 
               start, 
               normalcounter1, 
               normalcounter10, 
               random1, 
               random10);

    input C_CLK;
    input start;
   output [3:0] normalcounter1;
   output [3:0] normalcounter10;
   output [3:0] random1;
   output [3:0] random10;
   
   wire XLXN_1;
   wire XLXN_13;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_17;
   wire XLXN_18;
   wire XLXN_19;
   
   counter0_9_MUSER_counter  XLXI_1 (.C(XLXN_13), 
                                    .count(normalcounter1[3:0]), 
                                    .TC(XLXN_1));
   counter0_9_MUSER_counter  XLXI_2 (.C(XLXN_1), 
                                    .count(normalcounter10[3:0]), 
                                    .TC());
   counter0_9_MUSER_counter  XLXI_3 (.C(XLXN_14), 
                                    .count(random10[3:0]), 
                                    .TC());
   counter0_9_MUSER_counter  XLXI_4 (.C(XLXN_15), 
                                    .count(random1[3:0]), 
                                    .TC());
   Div16K_MUSER_counter  XLXI_7 (.In_CLK(C_CLK), 
                                .Out_CLK(XLXN_18));
   Div20K_MUSER_counter  XLXI_8 (.In_CLK(C_CLK), 
                                .Out_CLK(XLXN_17));
   Div4M_MUSER_counter  XLXI_9 (.In_CLK(C_CLK), 
                               .Out_CLK(XLXN_19));
   AND2  XLXI_13 (.I0(start), 
                 .I1(XLXN_19), 
                 .O(XLXN_13));
   AND2  XLXI_14 (.I0(start), 
                 .I1(XLXN_17), 
                 .O(XLXN_14));
   AND2  XLXI_15 (.I0(XLXN_18), 
                 .I1(start), 
                 .O(XLXN_15));
endmodule
